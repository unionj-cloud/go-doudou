package codegen

import (
	"bytes"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/unionj-cloud/go-doudou/v2/cmd/internal/svc/parser"
	"github.com/unionj-cloud/go-doudou/v2/version"

	"github.com/sirupsen/logrus"
	"github.com/unionj-cloud/toolkit/astutils"
)

var httpHandlerTmpl = `/**
* Generated by go-doudou {{.Version}}.
* Don't edit!
*/
package httpsrv

import (
	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/go-doudou/v2/framework"
	"net/http"
)

type {{.Meta.Name}}Handler interface {
{{- range $m := .Meta.Methods }}
	{{$m.Name}}(w http.ResponseWriter, r *http.Request)
{{- end }}
}

func Routes(handler {{.Meta.Name}}Handler) []rest.Route {
	return []rest.Route{
		{{- range $m := .Meta.Methods }}
		{
			Name: "{{$m.Name}}",
			Method: "{{$m.HttpMethod}}",
			Pattern: {{- if eq $.RoutePatternStrategy 1}}"/{{$.Meta.Name | lower}}/{{$m.Name | noSplitPattern}}",{{- else }}"/{{$m.Name | pattern}}",{{- end }}
			HandlerFunc: handler.{{$m.Name}},
		},
		{{- end }}
	}
}


var RouteAnnotationStore = framework.AnnotationStore{
	{{- range $m := .Meta.Methods }}
	{{- if $m.Annotations }}
	"{{$m.Name}}": {
		{{- range $a := $m.Annotations }}
		{
			Name:   "{{ $a.Name }}",
			{{- if $a.Params }}
			Params: []string{
				{{- range $p := $a.Params }}
				"{{ $p }}",
				{{- end }}
			},
			{{- end }}
		},
		{{- end }}
	},
	{{- end }}
	{{- end }}
}

func init() {
	framework.RegisterAnnotationStore(RouteAnnotationStore)
}
`

// GenHttpHandler generates http handler interface and routes
func GenHttpHandler(dir string, ic astutils.InterfaceCollector, routePatternStrategy int) {
	var (
		err         error
		handlerfile string
		f           *os.File
		tpl         *template.Template
		httpDir     string
		source      string
		buf         bytes.Buffer
		fi          os.FileInfo
	)
	httpDir = filepath.Join(dir, "transport/httpsrv")
	if err = os.MkdirAll(httpDir, os.ModePerm); err != nil {
		panic(err)
	}

	handlerfile = filepath.Join(httpDir, "handler.go")
	fi, err = os.Stat(handlerfile)
	if err != nil && !os.IsNotExist(err) {
		panic(err)
	}
	if fi != nil {
		logrus.Warningln("file handler.go will be overwritten")
	}
	if f, err = os.Create(handlerfile); err != nil {
		panic(err)
	}
	defer f.Close()

	funcMap := make(map[string]interface{})
	funcMap["pattern"] = func(input string) string {
		_, endpoint := astutils.Pattern(input)
		return endpoint
	}
	funcMap["noSplitPattern"] = parser.NoSplitPattern
	funcMap["lower"] = strings.ToLower
	if tpl, err = template.New(httpHandlerTmpl).Funcs(funcMap).Parse(httpHandlerTmpl); err != nil {
		panic(err)
	}
	if err = tpl.Execute(&buf, struct {
		RoutePatternStrategy int
		Meta                 astutils.InterfaceMeta
		Version              string
	}{
		RoutePatternStrategy: routePatternStrategy,
		Meta:                 ic.Interfaces[0],
		Version:              version.Release,
	}); err != nil {
		panic(err)
	}
	source = strings.TrimSpace(buf.String())
	astutils.FixImport([]byte(source), handlerfile)
}
